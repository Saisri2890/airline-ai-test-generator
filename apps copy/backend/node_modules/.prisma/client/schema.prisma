generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String    @id @default(cuid())
  email      String    @unique
  name       String
  password   String // Required for traditional auth
  role       UserRole  @default(QA_ANALYST)
  department String?
  isActive   Boolean   @default(true)
  lastLogin  DateTime?

  // Relations
  apiKeys        ApiKey[]
  templates      Template[]
  knowledgeBases KnowledgeBase[]
  testSuites     GeneratedTestSuite[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

enum UserRole {
  ADMIN
  QA_LEAD
  QA_ANALYST
}

model ApiKey {
  id        String   @id @default(cuid())
  provider  String // 'gemini', 'openai', 'open-router'
  keyValue  String // Store encrypted in application layer
  isActive  Boolean  @default(true)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Template {
  id        String   @id @default(cuid())
  name      String
  structure Json // Template structure
  modules   String[] // Applicable modules
  isPublic  Boolean  @default(false)
  version   String   @default("1.0")
  createdBy String
  user      User     @relation(fields: [createdBy], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model KnowledgeBase {
  id        String            @id @default(cuid())
  name      String
  type      String // 'local', 'google-drive', 'server'
  location  String
  isActive  Boolean           @default(true)
  metadata  Json?
  createdBy String
  user      User              @relation(fields: [createdBy], references: [id])
  sources   KnowledgeSource[]
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

model KnowledgeSource {
  id              String        @id @default(cuid())
  knowledgeBaseId String
  sourceType      String // 'user-stories', 'test-cases', 'brd', 'requirements'
  filePath        String
  fileName        String
  content         String?       @db.Text
  lastSynced      DateTime?
  knowledgeBase   KnowledgeBase @relation(fields: [knowledgeBaseId], references: [id], onDelete: Cascade)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model GeneratedTestSuite {
  id          String   @id @default(cuid())
  name        String
  testCases   Json // Generated test cases
  context     Json // Generation context
  provider    String // AI provider used
  generatedBy String
  user        User     @relation(fields: [generatedBy], references: [id])
  createdAt   DateTime @default(now())
}

model ContextTemplate {
  id                String   @id @default(cuid())
  name              String
  description       String?
  template          String   @db.Text
  variables         Json // Dynamic variables user can edit
  isDefault         Boolean  @default(false)
  applicableModules String[]
  createdBy         String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}
